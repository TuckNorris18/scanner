#include <vector>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <iostream>

using namespace std;

bool isNum(char c)
{
    if ((int)c >= 48 && (int)c <= 57)
    {
        return true;
    }
    return false;
}
bool isString(char c)
{
    int temp = (int)c;
    if (temp >= 65 && temp <= 90)
    {
        return true;
    }
    if (temp >= 97 && temp <= 122)
    {
        return true;
    }

    return false;
}
bool isID(string str)
{
    bool flag = true;
    for (int i = 0; i < str.length(); i++)
    {

        if (!isString(str[i]))
        {

            flag = false;
        }
    }
    return flag;
}
void getFilePath(string& path)
{
    cout << "What is the path for your file: ";

    cin >> path;
}
bool badToken(string token)
{
    bool str=false;
    bool num=false;
    for (int i = 0; i < token.size(); i++)
    {
        if (isString(token[i]))
        {
            str = true;
        }
        if (isNum(token[i]))
        {
            num = true;
        }
        if (num && str)
        {
            return true;
        }
    }
    return false;
}


string filePath;

int main()
{
    //get file path to text document
    getFilePath(filePath);
    ifstream file(filePath);
    string line;
    string temp;
    vector<string> tokens;

    bool commentFlag = false;
    bool flag = false;

    //This is essentially our transition table
    vector<string> checks;
    checks.push_back("read");
    checks.push_back("write");
    checks.push_back("/* ");
    checks.push_back("*/");
    checks.push_back(":=");
    checks.push_back("(");
    checks.push_back(")");
    checks.push_back("+");
    checks.push_back("-");
    checks.push_back("*");

    // Read one line at a time into the variable line:
    while (getline(file, line))
    {
        //cout << "Line is: " << line << endl;
        for (int i = 0; i < line.size(); i++)
        {
            temp.append(string (1,line[i]));
            //cout << "Appending: " << line[i] << endl;
            if (line[i] == ' ' || (i == line.size()-1))
            {
                //cout << "space" << endl;
                tokens.push_back(temp);
                temp = "";
            }
            
            
        }
        temp = "";
        
    }
    bool secondaryFlag = false;
    bool flagFound = false;
    cout << "Tokens (";

    //loop through tokens
    for (int i = 0; i < tokens.size(); i++)
    {
        
        //loop through checks
        for (int j = 0; j < checks.size(); j++)
        {
            //check "tokens" for tokens in table
            if (tokens[i] == "/* ")
            {
                commentFlag = 1;
            }
            else if (tokens[i] == "*/")
            {
                commentFlag = 0;
            }
            else if ((tokens[i] == checks[j]) && commentFlag == 0)
            {
                //check for read token
                if (tokens[i] == "read")
                {
                    cout << "read,";
                    flagFound = true;
                }
                //check for write token
                else if (tokens[i] == "write ")
                {
                    cout << "write,";
                    flagFound = true;

                }
                //check assign token
                else if (tokens[i] == ":=")
                {
                    cout << "assign,";
                    flagFound = true;

                }
                //check left paren
                else if (tokens[i] == "(")
                {
                    cout << "Left Paren,";
                    flagFound = true;

                }
                //check right paren
                else if (tokens[i] == ")")
                {
                    cout << "Right Paren,";
                    flagFound = true;

                }
                //check +
                else if (tokens[i] == "+")
                {
                    cout << "Addition,";
                    flagFound = true;

                }
                //check -
                else if (tokens[i] == "-")
                {
                    cout << "Subtraction,";
                    flagFound = true;

                }
                // check *
                else if (tokens[i] == "*")
                {
                    cout << "Multiplication,";
                    flagFound = true;


                }
                
                cout << " ";
            }
            flagFound = 0;

            
        }
        //check for bad tokens
        //If found throw error
        if (badToken(tokens[i]))
        {
            string goo;
            cout << "error invalid token: " << tokens[i] << endl;
            cin >> goo;
            exit(0);
        }
        
    }
    cout << ")";
    cin >> filePath;
}
